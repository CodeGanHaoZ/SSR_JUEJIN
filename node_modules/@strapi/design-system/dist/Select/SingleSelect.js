import { jsx as t, jsxs as i } from "react/jsx-runtime";
import * as h from "react";
import * as n from "@radix-ui/react-select";
import { Cross as H, CarretDown as M } from "@strapi/icons";
import s from "styled-components";
import { Field as U } from "../Field/Field.js";
import { FieldLabel as Y } from "../Field/FieldLabel.js";
import "../Field/FieldInput.js";
import { FieldHint as _ } from "../Field/FieldHint.js";
import { FieldError as G } from "../Field/FieldError.js";
import "../Field/FieldContext.js";
import "../Field/FieldAction.js";
import { Stack as J } from "../Stack/Stack.js";
import { Box as m } from "../Box/Box.js";
import { Flex as I } from "../Flex/Flex.js";
import { Typography as b } from "../Typography/Typography.js";
import { useId as L } from "../helpers/useId.js";
import { useIntersection as Q } from "../hooks/useIntersection.js";
import { getThemeSize as X, inputFocusStyle as Z } from "../themes/utils.js";
const ee = [" ", "Enter", "ArrowUp", "ArrowDown"], Te = ({
  children: e,
  clearLabel: o = "Clear",
  customizeContent: g = (p) => p.toString(),
  disabled: a,
  error: w,
  hint: k,
  id: T,
  label: C,
  labelAction: D,
  onChange: x,
  onClear: c,
  onReachEnd: y,
  placeholder: E,
  required: S,
  selectButtonTitle: se,
  startIcon: v,
  size: F = "M",
  value: f
}) => {
  const p = h.useRef(null), $ = h.useRef(null), d = h.useRef(null), [O, B] = h.useState(""), [V, N] = h.useState(!1), u = L(T), P = `${u}-hint`, j = `${u}-error`, z = (r) => {
    x ? x(typeof f == "number" ? Number(r) : r) : B(r);
  }, K = (r) => {
    c && !a && (c(r), $.current.focus());
  }, q = (r) => {
    N(r);
  }, A = (r) => {
    d.current && d.current === r.target.closest("div") && r.preventDefault();
  }, W = (r) => {
    ee.includes(r.key) && d.current && d.current === r.target.closest("div") && !a && c && (r.preventDefault(), c(r), $.current.focus());
  }, R = `intersection-${u}`;
  Q(p, (r) => {
    y && y(r);
  }, {
    selectorToWatch: `#${R}`,
    skipWhen: !V
  });
  const l = typeof f < "u" ? f.toString() : O;
  return t(U, {
    hint: k,
    error: w,
    id: u,
    required: S,
    children: i(J, {
      spacing: 1,
      children: [t(Y, {
        action: D,
        children: C
      }), i(n.Root, {
        onOpenChange: q,
        disabled: a,
        required: S,
        onValueChange: z,
        value: l,
        children: [i(te, {
          id: u,
          "aria-labelledby": `${P} ${j}`,
          "aria-disabled": a,
          $hasError: Boolean(w),
          $size: F,
          onPointerDown: A,
          onKeyDown: W,
          ref: $,
          children: [i(I, {
            as: "span",
            gap: 4,
            children: [v && t(m, {
              as: "span",
              "aria-hidden": !0,
              children: v
            }), t(b, {
              ellipsis: !0,
              textColor: l ? "neutral800" : "neutral600",
              children: t(n.Value, {
                "aria-label": l,
                children: l ? g(l) : E
              })
            })]
          }), i(I, {
            as: "span",
            gap: 3,
            children: [l && c ? t(re, {
              hasRadius: !0,
              background: "transparent",
              role: "button",
              tabIndex: 0,
              onClick: K,
              "aria-disabled": a,
              "aria-label": o,
              title: o,
              ref: d,
              children: t(H, {})
            }) : null, t(oe, {
              children: t(M, {})
            })]
          })]
        }), t(n.Portal, {
          children: t(ne, {
            position: "popper",
            sideOffset: 4,
            children: i(ie, {
              ref: p,
              children: [e, t(m, {
                id: R,
                width: "100%",
                height: "1px"
              })]
            })
          })
        })]
      }), t(_, {}), t(G, {})]
    })
  });
}, re = s(m)`
  border: none;

  svg {
    height: ${11 / 16}rem;
    width: ${11 / 16}rem;
  }

  svg path {
    fill: ${({
  theme: e
}) => e.colors.neutral600};
  }
`, te = s(n.Trigger)`
  position: relative;
  border: 1px solid ${({
  theme: e,
  $hasError: o
}) => o ? e.colors.danger600 : e.colors.neutral200};
  padding-right: ${({
  theme: e
}) => e.spaces[3]};
  padding-left: ${({
  theme: e
}) => e.spaces[3]};
  border-radius: ${({
  theme: e
}) => e.borderRadius};
  background: ${({
  theme: e
}) => e.colors.neutral0};
  overflow: hidden;
  min-height: ${({
  theme: e,
  $size: o
}) => X("input")({
  theme: e,
  size: o
})};
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: ${({
  theme: e
}) => e.spaces[4]};

  &[aria-disabled='true'] {
    color: ${(e) => e.theme.colors.neutral600};
    background: ${(e) => e.theme.colors.neutral150};
  }

  /* Required to ensure the below inputFocusStyles are adhered too */
  &:focus-visible {
    outline: none;
  }

  ${({
  theme: e,
  $hasError: o
}) => Z()({
  theme: e,
  hasError: o
})};
`, oe = s(n.Icon)`
  & > svg {
    width: ${6 / 16}rem;

    & > path {
      fill: ${({
  theme: e
}) => e.colors.neutral600};
    }
  }
`, ne = s(n.Content)`
  background: ${({
  theme: e
}) => e.colors.neutral0};
  box-shadow: ${({
  theme: e
}) => e.shadows.filterShadow};
  border: 1px solid ${({
  theme: e
}) => e.colors.neutral150};
  border-radius: ${({
  theme: e
}) => e.borderRadius};
  width: var(--radix-select-trigger-width);
  /* This is from the design-system figma file. */
  max-height: 15rem;
`, ie = s(n.Viewport)`
  padding: ${({
  theme: e
}) => e.spaces[1]};
`, Ce = ({
  children: e,
  startIcon: o,
  value: g
}) => i(le, {
  textValue: e.toString(),
  value: g.toString(),
  children: [o && t(m, {
    as: "span",
    paddingRight: 2,
    "aria-hidden": !0,
    children: o
  }), t(b, {
    textColor: "neutral800",
    children: t(n.ItemText, {
      children: e
    })
  })]
}), le = s(n.Item)`
  width: 100%;
  border: none;
  text-align: left;
  outline-offset: -3px;
  border-radius: ${(e) => e.theme.borderRadius};
  padding: ${(e) => `${e.theme.spaces[2]} ${e.theme.spaces[4]}`};
  padding-left: ${({
  theme: e
}) => e.spaces[4]};
  background-color: ${({
  theme: e
}) => e.colors.neutral0};
  display: flex;
  align-items: center;

  &:focus-visible {
    outline: none;
    background-color: ${({
  theme: e
}) => e.colors.primary100};
  }

  &:hover {
    background-color: ${({
  theme: e
}) => e.colors.primary100};
  }

  &[data-state='checked'] {
    ${b} {
      font-weight: bold;
      color: ${({
  theme: e
}) => e.colors.primary600};
    }
  }
`;
export {
  Te as SingleSelect,
  Ce as SingleSelectOption
};
