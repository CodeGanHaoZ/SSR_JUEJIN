import s, { forwardRef as u, Children as v, useState as I, useImperativeHandle as h } from "react";
import e from "prop-types";
import { TabsContext as x } from "./TabsContext.js";
import { useId as y } from "../helpers/useId.js";
const d = u(({ id: l, initialSelectedTabIndex: t, label: p, onTabChange: b, variant: c, ...i }, m) => {
  const f = y(l), n = v.toArray(i.children).find((a) => a.type.displayName === "Tabs");
  let r = t || 0;
  n && t === void 0 && (r = n.props.children.findIndex((a) => !a.props.disabled));
  const [T, o] = I(r === -1 ? 0 : r);
  return h(m, () => ({
    _handlers: { setSelectedTabIndex: o }
  })), /* @__PURE__ */ s.createElement(x.Provider, {
    value: { id: f, selectedTabIndex: T, selectTabIndex: o, label: p, variant: c, onTabChange: b }
  }, /* @__PURE__ */ s.createElement("div", {
    ...i
  }));
});
d.displayName = "TabGroup";
d.defaultProps = {
  id: void 0,
  initialSelectedTabIndex: void 0,
  onTabChange() {
  },
  variant: void 0
};
d.propTypes = {
  children: e.node.isRequired,
  id: e.string,
  initialSelectedTabIndex: e.number,
  label: e.string.isRequired,
  onTabChange: e.func,
  variant: e.oneOf(["simple"])
};
export {
  d as TabGroup
};
