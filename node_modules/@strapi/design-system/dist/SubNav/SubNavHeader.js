import e, { useState as L, useRef as p, useEffect as w } from "react";
import r from "prop-types";
import x from "styled-components";
import { Search as D } from "@strapi/icons";
import { Flex as I } from "../Flex/Flex.js";
import { Typography as K } from "../Typography/Typography.js";
import { IconButton as P } from "../IconButton/IconButton.js";
import { Box as n } from "../Box/Box.js";
import { Divider as k } from "../Divider/Divider.js";
import { Searchbar as O } from "../Searchbar/Searchbar.js";
import { SearchForm as F } from "../Searchbar/SearchForm.js";
import { useId as _ } from "../helpers/useId.js";
import { usePrevious as $ } from "../helpers/usePrevious.js";
import { KeyboardKeys as j } from "../helpers/keyboardKeys.js";
const d = x(k)`
  width: ${24 / 16}rem;
  background-color: ${({ theme: l }) => l.colors.neutral200};
`, f = ({ as: l, label: u, searchLabel: s, searchable: g, onChange: h, value: b, onClear: E, onSubmit: S, id: y }) => {
  const [o, i] = L(!1), m = $(o), C = _(y), a = p(), c = p();
  w(() => {
    o && a.current && a.current.focus(), m && !o && c.current && c.current.focus();
  }, [o, m]);
  const v = () => {
    i((t) => !t);
  }, B = (t) => {
    E(t), a.current.focus();
  }, T = (t) => {
    t.relatedTarget?.id !== C && i(!1);
  }, R = (t) => {
    t.key === j.ESCAPE && i(!1);
  };
  return o ? /* @__PURE__ */ e.createElement(n, {
    paddingLeft: 4,
    paddingTop: 5,
    paddingBottom: 2,
    paddingRight: 4
  }, /* @__PURE__ */ e.createElement(F, null, /* @__PURE__ */ e.createElement(O, {
    name: "searchbar",
    value: b,
    onChange: h,
    placeholder: "e.g: strapi-plugin-abcd",
    onKeyDown: R,
    ref: a,
    onBlur: T,
    onClear: B,
    onSubmit: S,
    clearLabel: "Clear",
    size: "S"
  }, s)), /* @__PURE__ */ e.createElement(n, {
    paddingLeft: 2,
    paddingTop: 4
  }, /* @__PURE__ */ e.createElement(d, null))) : /* @__PURE__ */ e.createElement(n, {
    paddingLeft: 6,
    paddingTop: 6,
    paddingBottom: 2,
    paddingRight: 4
  }, /* @__PURE__ */ e.createElement(I, {
    justifyContent: "space-between",
    alignItems: "flex-start"
  }, /* @__PURE__ */ e.createElement(K, {
    variant: "beta",
    as: l
  }, u), g && /* @__PURE__ */ e.createElement(P, {
    ref: c,
    onClick: v,
    label: s,
    icon: /* @__PURE__ */ e.createElement(D, null)
  })), /* @__PURE__ */ e.createElement(n, {
    paddingTop: 4
  }, /* @__PURE__ */ e.createElement(d, null)));
};
f.defaultProps = {
  as: "h2",
  searchable: !1,
  onChange() {
  },
  onClear() {
  },
  onSubmit() {
  },
  value: "",
  searchLabel: "",
  id: void 0
};
f.propTypes = {
  as: r.string,
  id: r.string,
  label: r.string.isRequired,
  onChange: r.func,
  onClear: r.func,
  onSubmit: r.func,
  searchLabel: r.string,
  searchable: r.bool,
  value: r.string
};
export {
  f as SubNavHeader
};
