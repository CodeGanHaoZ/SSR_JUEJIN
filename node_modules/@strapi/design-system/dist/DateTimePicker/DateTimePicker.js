import r, { useState as S, useEffect as x } from "react";
import { Stack as y } from "../Stack/Stack.js";
import { DatePicker as C } from "../DatePicker/DatePicker.js";
import { TimePicker as L } from "../TimePicker/TimePicker.js";
import { Field as R } from "../Field/Field.js";
import { FieldLabel as b } from "../Field/FieldLabel.js";
import "../Field/FieldInput.js";
import { FieldHint as j } from "../Field/FieldHint.js";
import { FieldError as z } from "../Field/FieldError.js";
import "../Field/FieldContext.js";
import "../Field/FieldAction.js";
import { useId as A } from "../helpers/useId.js";
import { parseDate as H } from "./parseDate.js";
import { dateTimePickerDefaultProps as B, dateTimePickerPropTypes as G } from "./DateTimePickerProps.js";
const M = ({
  ariaLabel: g,
  clearLabel: T,
  disabled: E,
  error: d,
  hint: p,
  label: l,
  labelAction: w,
  onChange: o,
  onClear: f,
  name: $,
  required: u,
  selectButtonTitle: h,
  size: k,
  step: F,
  value: a,
  ...P
}) => {
  const n = H(a), [i, m] = S(n), [c, s] = S(
    n ? `${n.getHours()}:${n.getMinutes()}:${n.getSeconds()}` : null
  ), V = (e) => {
    m(e);
    let t;
    c ? (t = new Date(e), t.setHours(c.split(":")[0]), t.setMinutes(c.split(":")[1])) : (t = new Date(e), s(`${t.getHours()}:${t.getMinutes()}:${t.getSeconds()}`)), o && o(t);
  }, I = (e) => {
    s(e);
    const t = i ? new Date(i) : new Date();
    t.setHours(e.split(":")[0]), t.setMinutes(e.split(":")[1]), i || m(t), o && o(t);
  }, _ = () => {
    m(void 0), s(void 0), f();
  }, v = () => {
    s(void 0);
    let e;
    i && (e = new Date(i), e.setHours("00"), e.setMinutes("00")), o && o(e);
  };
  x(() => {
    if (a && +a != +i) {
      const e = H(a);
      m(e), s(
        e ? `${e.getHours()}:${e.getMinutes()}:${e.getSeconds()}` : null
      );
    } else
      a || (m(void 0), s(void 0));
  }, [a, i]);
  const D = A(P?.id);
  return /* @__PURE__ */ r.createElement(R, {
    name: $,
    role: "group",
    id: D,
    "aria-labelledby": D,
    hint: p,
    error: d,
    required: u
  }, /* @__PURE__ */ r.createElement(y, {
    spacing: 1
  }, l && /* @__PURE__ */ r.createElement(b, {
    action: w
  }, l), /* @__PURE__ */ r.createElement(y, {
    horizontal: !0,
    spacing: 2
  }, /* @__PURE__ */ r.createElement(C, {
    "data-testid": "datetimepicker-date",
    id: D,
    name: $,
    ariaLabel: l || g,
    error: typeof d == "string",
    hint: typeof p == "string",
    selectedDate: i,
    selectedDateLabel: (e) => `Date picker, current is ${e}`,
    onChange: V,
    required: u,
    size: k,
    onClear: f && _,
    clearLabel: T,
    disabled: E,
    ...P
  }), /* @__PURE__ */ r.createElement(L, {
    "data-testid": "datetimepicker-time",
    size: k,
    "aria-label": l || g,
    error: typeof d == "string",
    hint: typeof p == "string",
    value: c,
    onChange: I,
    onClear: f && v,
    clearLabel: T,
    required: u,
    selectButtonTitle: h,
    disabled: E,
    step: F
  })), /* @__PURE__ */ r.createElement(j, null), /* @__PURE__ */ r.createElement(z, null)));
};
M.defaultProps = B;
M.propTypes = G;
export {
  M as DateTimePicker
};
